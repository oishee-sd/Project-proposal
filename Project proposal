public class Question {
private String questionText;
private String[] options;
private int correctAnswerIndex;
private String difficulty;
private String language;

public Question(String questionText, String[] options, int correctAnswerIndex, String difficulty, String language) {  
    this.questionText = questionText;  
    this.options = options;  
    this.correctAnswerIndex = correctAnswerIndex;  
    this.difficulty = difficulty;  
    this.language = language;  
}  

public String getQuestionText() {  
    return questionText;  
}  

public String[] getOptions() {  
    return options;  
}  

public boolean isCorrect(int selected) {  
    return selected == correctAnswerIndex;  
}  

public String getDifficulty() {  
    return difficulty;  
}  

public String getLanguage() {  
    return language;  
}

}
public class Player {
private String name;
private int score;

public Player(String name) {  
    this.name = name;  
    this.score = 0;  
}  

public String getName() {  
    return name;  
}  

public int getScore() {  
    return score;  
}  

public void increaseScore() {  
    score++;  
}  

public void resetScore() {  
    score = 0;  
}

}
import java.util.ArrayList;

public class Quiz {
private ArrayList<Question> questions;

public Quiz() {  
    questions = new ArrayList<>();  
}  

public void addQuestion(Question q) {  
    questions.add(q);  
}  

public ArrayList<Question> getFilteredQuestions(String category, String difficulty) {  
    ArrayList<Question> filtered = new ArrayList<>();  
    for (Question q : questions) {  
        if (q.getCategory().equalsIgnoreCase(category) && q.getDifficulty().equalsIgnoreCase(difficulty)) {  
            filtered.add(q);  
        }  
    }  
    return filtered;  
}

}
import javax.swing.;
import java.awt.;
import java.awt.event.*;
import java.util.ArrayList;

public class QuizGameGUI {
private JFrame frame;
private JTextField nameField;
private JComboBox<String> categoryBox, difficultyBox;
private JPanel questionPanel;
private JButton startButton;
private Quiz quiz;
private Player player;
private ArrayList<Question> currentQuestions;
private int currentIndex;
private ButtonGroup optionsGroup;
private JRadioButton[] optionButtons;

public QuizGameGUI() {  
    quiz = new Quiz();  
    loadSampleQuestions();  
    buildGUI();  
}  

private void loadSampleQuestions() {  
    // Java - Easy  
    quiz.addQuestion(new Question("What is JVM?", new String[]{"Java Virtual Machine", "Java Variable Memory", "Just Virtual Method", "Java Value Method"}, 0, "Java", "Easy"));  
    quiz.addQuestion(new Question("Which file type is created after compiling Java code?", new String[]{".class", ".java", ".exe", ".jar"}, 0, "Java", "Easy"));  
    quiz.addQuestion(new Question("Which keyword defines a class?", new String[]{"function", "def", "class", "define"}, 2, "Java", "Easy"));  
    quiz.addQuestion(new Question("Which method is the entry point of a Java program?", new String[]{"start()", "main()", "run()", "execute()"}, 1, "Java", "Easy"));  
    quiz.addQuestion(new Question("Java is a ___ language.", new String[]{"Procedural", "Low-level", "Object-Oriented", "Assembly"}, 2, "Java", "Easy"));  

    // Java - Medium  
    quiz.addQuestion(new Question("Which keyword is used to inherit a class?", new String[]{"super", "extends", "this", "implements"}, 1, "Java", "Medium"));  
    quiz.addQuestion(new Question("Which exception is unchecked?", new String[]{"IOException", "SQLException", "NullPointerException", "FileNotFoundException"}, 2, "Java", "Medium"));  
    quiz.addQuestion(new Question("What is the use of 'final' keyword?", new String[]{"To make a variable constant", "To exit a loop", "To declare a function", "To throw exception"}, 0, "Java", "Medium"));  
    quiz.addQuestion(new Question("Which class is the parent of all Java classes?", new String[]{"Object", "Main", "Super", "Core"}, 0, "Java", "Medium"));  
    quiz.addQuestion(new Question("What is method overloading?", new String[]{"Same method name with different parameters", "Calling parent method", "Inheriting class", "Multiple classes"}, 0, "Java", "Medium"));  

    // Java - Hard  
    quiz.addQuestion(new Question("Which concept allows multiple methods with same name?", new String[]{"Overloading", "Overriding", "Inheritance", "Abstraction"}, 0, "Java", "Hard"));  
    quiz.addQuestion(new Question("Which Java feature helps in hiding implementation details?", new String[]{"Encapsulation", "Polymorphism", "Inheritance", "Interfaces"}, 0, "Java", "Hard"));  
    quiz.addQuestion(new Question("What does 'this' keyword refer to?", new String[]{"Current class object", "Parent class", "Constructor", "Static class"}, 0, "Java", "Hard"));  
    quiz.addQuestion(new Question("Which collection class allows duplicate elements?", new String[]{"Set", "List", "Map", "TreeSet"}, 1, "Java", "Hard"));  
    quiz.addQuestion(new Question("What is the size of int in Java?", new String[]{"2 bytes", "4 bytes", "8 bytes", "Depends on OS"}, 1, "Java", "Hard"));  

    // DBMS - Easy  
    quiz.addQuestion(new Question("What is SQL used for?", new String[]{"Drawing", "Database", "Gaming", "None"}, 1, "DBMS", "Easy"));  
    quiz.addQuestion(new Question("Which command is used to retrieve data?", new String[]{"SELECT", "DELETE", "UPDATE", "INSERT"}, 0, "DBMS", "Easy"));  
    quiz.addQuestion(new Question("Which key uniquely identifies a record?", new String[]{"Foreign Key", "Unique Key", "Primary Key", "Null Key"}, 2, "DBMS", "Easy"));  
    quiz.addQuestion(new Question("What is a database?", new String[]{"Collection of tables", "Collection of data", "A program", "A file"}, 1, "DBMS", "Easy"));  
    quiz.addQuestion(new Question("Which command is used to delete all records?", new String[]{"DROP", "TRUNCATE", "DELETE", "REMOVE"}, 2, "DBMS", "Easy"));  

    // DBMS - Medium  
    quiz.addQuestion(new Question("Which normal form eliminates partial dependency?", new String[]{"1NF", "2NF", "3NF", "BCNF"}, 1, "DBMS", "Medium"));  
    quiz.addQuestion(new Question("Which SQL function returns current date?", new String[]{"NOW()", "CURRENT()", "SYSDATE()", "DATE()"}, 0, "DBMS", "Medium"));  
    quiz.addQuestion(new Question("Which JOIN returns common data?", new String[]{"LEFT", "RIGHT", "INNER", "FULL"}, 2, "DBMS", "Medium"));  
    quiz.addQuestion(new Question("Which is not a DDL command?", new String[]{"CREATE", "ALTER", "DROP", "SELECT"}, 3, "DBMS", "Medium"));  
    quiz.addQuestion(new Question("What is a view in DBMS?", new String[]{"Temporary table", "Real table", "Memory block", "Stored procedure"}, 0, "DBMS", "Medium"));  

    // DBMS - Hard  
    quiz.addQuestion(new Question("Which key is used to link two tables?", new String[]{"Primary Key", "Candidate Key", "Foreign Key", "Super Key"}, 2, "DBMS", "Hard"));  
    quiz.addQuestion(new Question("Which level hides internal structure?", new String[]{"View Level", "Internal", "Conceptual", "Physical"}, 0, "DBMS", "Hard"));  
    quiz.addQuestion(new Question("What ensures data integrity?", new String[]{"Constraints", "Joins", "Triggers", "Indexes"}, 0, "DBMS", "Hard"));  
    quiz.addQuestion(new Question("Which statement is used to modify table structure?", new String[]{"MODIFY", "CHANGE", "ALTER", "UPDATE"}, 2, "DBMS", "Hard"));  
    quiz.addQuestion(new Question("Which command removes table?", new String[]{"TRUNCATE", "DELETE", "DROP", "REMOVE"}, 2, "DBMS", "Hard"));  

    // C Programming - Easy  
    quiz.addQuestion(new Question("What is the file extension of C program?", new String[]{".c", ".cpp", ".java", ".py"}, 0, "C Programming", "Easy"));  
    quiz.addQuestion(new Question("Who developed C language?", new String[]{"James Gosling", "Bjarne Stroustrup", "Dennis Ritchie", "Guido van Rossum"}, 2, "C Programming", "Easy"));  
    quiz.addQuestion(new Question("Which function starts execution?", new String[]{"start()", "main()", "execute()", "run()"}, 1, "C Programming", "Easy"));  
    quiz.addQuestion(new Question("C is a ___ language.", new String[]{"Object Oriented", "Procedural", "Functional", "Markup"}, 1, "C Programming", "Easy"));  
    quiz.addQuestion(new Question("Which symbol ends a statement in C?", new String[]{"!", ".", ";", ":"}, 2, "C Programming", "Easy"));  

    // C Programming - Medium  
    quiz.addQuestion(new Question("Which operator is used for AND?", new String[]{"&", "|", "^", "&&"}, 3, "C Programming", "Medium"));  
    quiz.addQuestion(new Question("Which function reads a character?", new String[]{"scanf()", "gets()", "getchar()", "puts()"}, 2, "C Programming", "Medium"));  
    quiz.addQuestion(new Question("How to declare pointer?", new String[]{"int *p;", "int p;", "*int p;", "int &p;"}, 0, "C Programming", "Medium"));  
    quiz.addQuestion(new Question("Which header file defines printf?", new String[]{"stdio.h", "conio.h", "stdlib.h", "math.h"}, 0, "C Programming", "Medium"));  
    quiz.addQuestion(new Question("What is the size of float?", new String[]{"2 bytes", "4 bytes", "8 bytes", "16 bytes"}, 1, "C Programming", "Medium"));  

    // C Programming - Hard  
    quiz.addQuestion(new Question("Which loop is guaranteed to run once?", new String[]{"for", "while", "do-while", "if"}, 2, "C Programming", "Hard"));  
    quiz.addQuestion(new Question("Which function is used to allocate memory?", new String[]{"malloc", "allocate", "memset", "calloc"}, 0, "C Programming", "Hard"));  
    quiz.addQuestion(new Question("What is recursion?", new String[]{"Function calling itself", "Loop inside loop", "Multiple return values", "None"}, 0, "C Programming", "Hard"));  
    quiz.addQuestion(new Question("What is the output of sizeof(char)?", new String[]{"0", "1", "2", "4"}, 1, "C Programming", "Hard"));  
    quiz.addQuestion(new Question("Which of the following is not a storage class?", new String[]{"auto", "register", "static", "public"}, 3, "C Programming", "Hard"));  
}  

private void buildGUI() {  
    frame = new JFrame("Quiz Game");  
    frame.setSize(500, 400);  
    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);  
    frame.setLayout(new BorderLayout());  

    JPanel inputPanel = new JPanel(new GridLayout(4, 2, 10, 10));  
    inputPanel.setBorder(BorderFactory.createTitledBorder("Player Info"));  

    inputPanel.add(new JLabel("Name:"));  
    nameField = new JTextField();  
    inputPanel.add(nameField);  

    inputPanel.add(new JLabel("Category:"));  
    categoryBox = new JComboBox<>(new String[]{"Java", "DBMS", "C Programming"});  
    inputPanel.add(categoryBox);  

    inputPanel.add(new JLabel("Difficulty:"));  
    difficultyBox = new JComboBox<>(new String[]{"Easy", "Medium", "Hard"});  
    inputPanel.add(difficultyBox);  

    startButton = new JButton("Start Quiz");  
    inputPanel.add(startButton);  

    frame.add(inputPanel, BorderLayout.NORTH);  

    questionPanel = new JPanel();  
    questionPanel.setLayout(new BoxLayout(questionPanel, BoxLayout.Y_AXIS));  
    frame.add(new JScrollPane(questionPanel), BorderLayout.CENTER);  

    startButton.addActionListener(e -> startQuiz());  

    frame.setVisible(true);  
}  

private void startQuiz() {  
    String name = nameField.getText();  
    if (name.isEmpty()) {  
        JOptionPane.showMessageDialog(frame, "Please enter your name.");  
        return;  
    }  

    player = new Player(name);  
    String category = categoryBox.getSelectedItem().toString();  
    String difficulty = difficultyBox.getSelectedItem().toString();  

    currentQuestions = quiz.getFilteredQuestions(category, difficulty);  
    if (currentQuestions.isEmpty()) {  
        JOptionPane.showMessageDialog(frame, "No questions found for selected category and difficulty.");  
        return;  
    }  

    currentIndex = 0;  
    player.resetScore();  
    showNextQuestion();  
}  

private void showNextQuestion() {  
    questionPanel.removeAll();  

    if (currentIndex >= currentQuestions.size()) {  
        JOptionPane.showMessageDialog(frame, player.getName() + ", your final score is: " +  
                player.getScore() + "/" + currentQuestions.size());  
        return;  
    }  

    Question q = currentQuestions.get(currentIndex);  
    JLabel questionLabel = new JLabel((currentIndex + 1) + ". " + q.getQuestionText());  
    questionLabel.setFont(new Font("Arial", Font.BOLD, 14));  
    questionPanel.add(questionLabel);  

    optionsGroup = new ButtonGroup();  
    optionButtons = new JRadioButton[q.getOptions().length];  

    for (int i = 0; i < q.getOptions().length; i++) {  
        optionButtons[i] = new JRadioButton(q.getOptions()[i]);  
        optionsGroup.add(optionButtons[i]);  
        questionPanel.add(optionButtons[i]);  
    }  

    JButton submitButton = new JButton("Submit Answer");  
    questionPanel.add(submitButton);  

    submitButton.addActionListener(e -> {  
        int selected = -1;  
        for (int i = 0; i < optionButtons.length; i++) {  
            if (optionButtons[i].isSelected()) {  
                selected = i;  
                break;  
            }  
        }  

        if (selected == -1) {  
            JOptionPane.showMessageDialog(frame, "Please select an answer.");  
            return;  
        }  

        if (selected == q.getCorrectAnswerIndex()) {  
            player.increaseScore();  
            JOptionPane.showMessageDialog(frame, "Correct!");  
        } else {  
            JOptionPane.showMessageDialog(frame, "Wrong!");  
        }  

        currentIndex++;  
        showNextQuestion();  
    });  

    frame.revalidate();  
    frame.repaint();  
}  

public static void main(String[] args) {  
    SwingUtilities.invokeLater(QuizGameGUI::new);  
}

}






